/*! For license information please see main.26e8496d210b368a8de4.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./src/styles/index.scss":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://rs-virtual-keyboard/./src/styles/index.scss?")},"./src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _styles_index_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/index.scss */ \"./src/styles/index.scss\");\n/* harmony import */ var _scripts_keyboard_rows__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/keyboard-rows */ \"./src/scripts/keyboard-rows.js\");\n/* harmony import */ var _scripts_create_element_from_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/create-element-from-string */ \"./src/scripts/create-element-from-string.js\");\n/* harmony import */ var _scripts_compose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scripts/compose */ \"./src/scripts/compose.js\");\n\n\n\n\n\nconst LANGUAGE_STORAGE_KEY = 'keyboard-lang';\nconst CAPS_LOCK = 'CapsLock';\nconst SHIFT = 'Shift';\nconst ALT = 'Alt';\nconst TAB = 'Tab';\n\nclass Keyboard {\n  constructor(rootElement) {\n    this.keyboardRows = null;\n    this.keyboardRowsFlat = null;\n    this.letterKeys = null;\n    this.nonLetterKeys = null;\n\n    this.lang = localStorage.getItem(LANGUAGE_STORAGE_KEY) || 'en';\n    this.isCapsLock = false;\n    this.isAlt = false;\n    this.isShift = false;\n    this.keyPressed = {};\n\n    this.root = rootElement;\n    this.keyElements = {};\n    this.textarea = null;\n    this.keyboardContainer = null;\n  }\n\n  init() {\n    this.getKeyboardLayout();\n    this.renderHeader();\n    this.renderMain();\n    this.textarea = document.querySelector('#text');\n    this.keyboardContainer = document.querySelector('#keyboard-container');\n    this.activatePhysicalKeyboardHandlers();\n    this.activateVirtualKeyboardHandlers();\n  }\n\n  getKeyboardLayout() {\n    this.keyboardRows = (0,_scripts_keyboard_rows__WEBPACK_IMPORTED_MODULE_1__.getKeyboardLayout)(this.lang);\n    this.keyboardRowsFlat = this.keyboardRows.flat();\n    this.letterKeys = this.keyboardRowsFlat.filter(({ isLetter }) => isLetter);\n    this.nonLetterKeys = this.keyboardRowsFlat.filter(({ isLetter }) => !isLetter);\n  }\n\n  handleKeyboardHighlight(code, method) {\n    const element = this.keyElements[code];\n\n    if (element && code !== CAPS_LOCK) {\n      element.classList[method]('key--active');\n    }\n  }\n\n  activatePhysicalKeyboardHandlers() {\n    const handleHighlightKeydown = (evt) => {\n      this.handleKeyboardHighlight(evt.code, 'add');\n    };\n\n    const handleShiftKeydown = (evt) => {\n      if (evt.code.startsWith(SHIFT)) {\n        this.isShift = true;\n        this.updateKeyboard();\n      }\n    };\n\n    const handleTabKeydown = (evt) => {\n      if (evt.code === TAB) {\n        evt.preventDefault();\n\n        if (document.activeElement === this.textarea) {\n          this.printText(evt.code, '\\t');\n        }\n      }\n    };\n\n    const handleOptKeydown = (evt) => {\n      if (evt.code.startsWith(ALT)) {\n        this.isAlt = true;\n      }\n    };\n\n    const handleLanguageChange = () => {\n      this.handleLayoutChange();\n    };\n\n    const handleCapsLockChange = (evt) => {\n      if (evt.code === CAPS_LOCK) {\n        this.isCapsLock = evt.getModifierState(CAPS_LOCK);\n\n        this.handleCapsLock();\n      }\n    };\n\n    const handleHighlightKeyup = (evt) => {\n      this.handleKeyboardHighlight(evt.code, 'remove');\n    };\n\n    const handleShiftUp = (evt) => {\n      if (evt.code.startsWith(SHIFT)) {\n        this.isShift = false;\n        this.updateKeyboard();\n      }\n    };\n\n    const handleOptKeyup = (evt) => {\n      if (evt.code.startsWith(ALT)) {\n        this.isAlt = false;\n      }\n    };\n\n    document.addEventListener('keydown', (0,_scripts_compose__WEBPACK_IMPORTED_MODULE_3__[\"default\"])([\n      handleHighlightKeydown,\n      handleCapsLockChange,\n      handleShiftKeydown,\n      handleTabKeydown,\n      handleOptKeydown,\n      handleLanguageChange,\n    ]));\n    document.addEventListener('keyup', (0,_scripts_compose__WEBPACK_IMPORTED_MODULE_3__[\"default\"])([\n      handleHighlightKeyup,\n      handleShiftUp,\n      handleOptKeyup,\n      handleCapsLockChange,\n    ]));\n  }\n\n  activateVirtualKeyboardHandlers() {\n    const handleHighlightMousedown = (evt) => {\n      this.handleKeyboardHighlight(evt.target.id, 'add');\n    };\n\n    const handleShiftClick = (evt) => {\n      const code = evt.target.id;\n\n      if (code.startsWith(SHIFT)) {\n        this.isShift = !this.isShift;\n        this.handleLayoutChange();\n      } else if (!code.startsWith(ALT)) {\n        this.isShift = false;\n      }\n\n      this.handleShift(code);\n    };\n\n    const handleOptClick = (evt) => {\n      const code = evt.target.id;\n\n      if (code.startsWith(ALT)) {\n        this.isAlt = !this.isAlt;\n        this.handleLayoutChange();\n      } else {\n        this.isAlt = false;\n      }\n\n      this.handleAlt(code);\n    };\n\n    const handleCapsLockClick = (evt) => {\n      if (evt.target.id === CAPS_LOCK) {\n        this.isCapsLock = !this.isCapsLock;\n\n        this.handleCapsLock();\n      }\n    };\n\n    const handleTextPrintClick = (evt) => {\n      const code = evt.target.id;\n      const canPrintText = code && code !== 'keyboard-container' && !_scripts_keyboard_rows__WEBPACK_IMPORTED_MODULE_1__.CONTROL_KEYS.has(code);\n\n      if (canPrintText) {\n        this.printText(code, evt.target.textContent);\n      }\n    };\n\n    const handleArrowKeysClick = (evt) => {\n      const code = evt.target.id;\n\n      if (code.startsWith('Arrow')) {\n        this.changeCursorPosition(code);\n      }\n    };\n\n    const handleHighlightMouseup = (evt) => {\n      this.handleKeyboardHighlight(evt.target.id, 'remove');\n    };\n\n    this.keyboardContainer.addEventListener('click', (0,_scripts_compose__WEBPACK_IMPORTED_MODULE_3__[\"default\"])([\n      handleCapsLockClick,\n      handleTextPrintClick,\n      handleArrowKeysClick,\n      handleShiftClick,\n      handleOptClick,\n    ]));\n    this.keyboardContainer.addEventListener('mousedown', (0,_scripts_compose__WEBPACK_IMPORTED_MODULE_3__[\"default\"])([\n      handleHighlightMousedown,\n    ]));\n    this.keyboardContainer.addEventListener('mouseup', (0,_scripts_compose__WEBPACK_IMPORTED_MODULE_3__[\"default\"])([\n      handleHighlightMouseup,\n    ]));\n  }\n\n  handleCapsLock() {\n    this.updateKeyboard();\n\n    if (this.isCapsLock) {\n      this.keyElements[CAPS_LOCK].classList.add('key--caps-active');\n    } else {\n      this.keyElements[CAPS_LOCK].classList.remove('key--caps-active');\n    }\n  }\n\n  handleShift(code) {\n    this.updateKeyboard();\n\n    if (this.isShift) {\n      this.handleKeyboardHighlight(code, 'add');\n    } else {\n      this.handleKeyboardHighlight('ShiftLeft', 'remove');\n      this.handleKeyboardHighlight('ShiftRight', 'remove');\n    }\n  }\n\n  handleAlt(code) {\n    if (this.isAlt) {\n      this.handleKeyboardHighlight(code, 'add');\n    } else {\n      this.handleKeyboardHighlight('AltLeft', 'remove');\n      this.handleKeyboardHighlight('AltRight', 'remove');\n    }\n  }\n\n  updateKeyboard() {\n    if (this.isShift) {\n      this.updateKeySymbols(this.nonLetterKeys, 'shift');\n    } else {\n      this.updateKeySymbols(this.nonLetterKeys, 'main');\n    }\n\n    if (this.isCapsLock || this.isShift) {\n      this.updateKeySymbols(this.letterKeys, 'shift');\n    } else {\n      this.updateKeySymbols(this.letterKeys, 'main');\n    }\n  }\n\n  updateKeySymbols(arr, mode) {\n    arr.forEach((key) => {\n      this.keyElements[key.code].innerHTML = key[mode][this.lang];\n    });\n  }\n\n  handleLayoutChange() {\n    if (this.isShift && this.isAlt) {\n      this.lang = this.lang === 'en' ? 'ru' : 'en';\n      localStorage.setItem(LANGUAGE_STORAGE_KEY, this.lang);\n\n      this.getKeyboardLayout();\n      this.updateKeyboard();\n      this.isShift = false;\n      this.isAlt = false;\n      this.handleAlt();\n      this.handleShift();\n    }\n  }\n\n  printText(code, letter = '') {\n    let cursorStart = this.textarea.selectionStart;\n    const cursorEnd = this.textarea.selectionEnd;\n\n    const firstPart = this.textarea.value.slice(0, cursorStart);\n    const secondPart = this.textarea.value.slice(cursorEnd);\n\n    switch (code) {\n      case 'Tab':\n        this.textarea.value = `${firstPart}\\t${secondPart}`;\n        cursorStart += 1;\n\n        break;\n\n      case 'Space':\n        this.textarea.value = `${firstPart} ${secondPart}`;\n        cursorStart += 1;\n\n        break;\n\n      case 'Backspace':\n        this.textarea.value = firstPart.slice(0, -1) + secondPart;\n        cursorStart -= 1;\n\n        break;\n\n      case 'Delete':\n        this.textarea.value = firstPart + secondPart.slice(1);\n        break;\n\n      case 'Enter':\n        this.textarea.value = `${firstPart}\\n${secondPart}`;\n        cursorStart += 1;\n\n        break;\n      default:\n        this.textarea.value = `${firstPart}${letter}${secondPart}`;\n        cursorStart += 1;\n    }\n\n    this.textarea.focus();\n    this.textarea.setSelectionRange(cursorStart, cursorStart);\n  }\n\n  changeCursorPosition(code) {\n    let cursorStart = this.textarea.selectionStart;\n\n    const firstPart = this.textarea.value.slice(0, cursorStart);\n    const secondPart = this.textarea.value.slice(cursorStart);\n\n    switch (code) {\n      case 'ArrowLeft':\n        cursorStart = cursorStart - 1 >= 0 ? cursorStart - 1 : 0;\n        break;\n\n      case 'ArrowRight':\n        cursorStart += 1;\n        break;\n\n      case 'ArrowUp': {\n        const upperLines = firstPart.split('\\n');\n\n        if (upperLines.length > 1) {\n          const upperLineLength = upperLines[upperLines.length - 2].length;\n          const currentLinePosition = upperLines[upperLines.length - 1].length;\n\n          if (upperLineLength < currentLinePosition) {\n            cursorStart = upperLines\n              .slice(0, upperLines.length - 1)\n              .reduce((acc, val) => acc + val.length + 1, 0) - 1;\n          } else {\n            const upperLinesLength = upperLines\n              .slice(0, upperLines.length - 2)\n              .reduce((acc, val) => acc + val.length + 1, 0);\n            cursorStart = upperLinesLength + currentLinePosition;\n          }\n        }\n\n        break;\n      }\n\n      case 'ArrowDown': {\n        const belowLines = secondPart.split('\\n');\n\n        if (belowLines.length > 1) {\n          const upperLines = firstPart.split('\\n');\n          const currentLineIndex = upperLines.length - 1;\n          const currentLinePosition = upperLines[currentLineIndex].length;\n          const belowLineLength = belowLines[1].length;\n          const allLines = this.textarea.value.split('\\n');\n\n          if (belowLineLength < currentLinePosition) {\n            cursorStart = allLines.slice(0, upperLines.length + 1)\n              .reduce((acc, val) => acc + val.length + 1, 0) - 1;\n          } else {\n            const upperLinesLength = allLines.slice(0, currentLineIndex + 1)\n              .reduce((acc, val) => acc + val.length + 1, 0);\n\n            cursorStart = upperLinesLength + currentLinePosition;\n          }\n        }\n\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    this.textarea.focus();\n    this.textarea.setSelectionRange(cursorStart, cursorStart);\n  }\n\n  getMode() {\n    return this.isShift ? 'shift' : 'main';\n  }\n\n  getKeyboardElement() {\n    const keyboard = (0,_scripts_create_element_from_string__WEBPACK_IMPORTED_MODULE_2__[\"default\"])('<div class=\"keyboard\"></div>');\n    const keyboardContainer = (0,_scripts_create_element_from_string__WEBPACK_IMPORTED_MODULE_2__[\"default\"])('<div class=\"keys-container\" id=\"keyboard-container\"></div>');\n\n    this.keyboardRows.forEach((row) => {\n      const rowElement = (0,_scripts_create_element_from_string__WEBPACK_IMPORTED_MODULE_2__[\"default\"])('<div class=\"row\"></div>');\n      Object.values(row).forEach((key) => {\n        const keyElement = (0,_scripts_create_element_from_string__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(`\n          <button class=\"key\" tabindex=\"-1\" id=${key.code}></button>\n        `);\n        keyElement.innerHTML = key.main[this.lang];\n\n        if (key.className) {\n          keyElement.classList.add(key.className);\n        }\n\n        this.keyElements[key.code] = keyElement;\n        rowElement.append(keyElement);\n      });\n      keyboardContainer.append(rowElement);\n    });\n\n    keyboard.append(keyboardContainer);\n\n    return keyboard;\n  }\n\n  renderHeader() {\n    const header = (0,_scripts_create_element_from_string__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(`\n      <header>\n        <div class=\"wrapper\">\n          <h1 class=\"site-heading\">Rolling scope VIRTUAL KEYBOARD</h1>\n        </div>\n      </header>\n    `);\n\n    this.root.append(header);\n  }\n\n  renderMain() {\n    const main = document.createElement('main');\n    const wrapper = (0,_scripts_create_element_from_string__WEBPACK_IMPORTED_MODULE_2__[\"default\"])('<div class=\"wrapper\"></div>');\n    this.textarea = Keyboard.getTextAreaElement().querySelector('textarea');\n    wrapper.append(Keyboard.getTextAreaElement());\n    wrapper.append(this.getKeyboardElement());\n    wrapper.append(Keyboard.getKeyboardTipElement());\n    main.append(wrapper);\n\n    this.root.append(main);\n  }\n\n  static getKeyboardTipElement() {\n    return (0,_scripts_create_element_from_string__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(`\n      <div class=\"keyboard-tip\">\n        <p>Keyboard was made for Mac OS System</p>\n        <p>Input language shorthand: <code> &lt;Opt&gt; + &lt;Shift&gt;</code> </p>\n      </div>\n    `);\n  }\n\n  static getTextAreaElement() {\n    return (0,_scripts_create_element_from_string__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(`\n      <div class=\"site-textarea\">\n        <textarea name=\"text\" id=\"text\" cols=\"30\" rows=\"10\"></textarea>\n      </div>\n    `);\n  }\n}\n\nnew Keyboard(document.body).init();\n\n\n//# sourceURL=webpack://rs-virtual-keyboard/./src/index.js?")},"./src/scripts/compose.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((array) => (...args) => {\n  array.forEach((func) => {\n    func(...args);\n  });\n});\n\n\n//# sourceURL=webpack://rs-virtual-keyboard/./src/scripts/compose.js?')},"./src/scripts/create-element-from-string.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((str) => {\n  const element = document.createElement('div');\n  element.insertAdjacentHTML('afterbegin', str.trim());\n\n  return element.firstChild;\n});\n\n\n//# sourceURL=webpack://rs-virtual-keyboard/./src/scripts/create-element-from-string.js?")},"./src/scripts/keyboard-rows.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CONTROL_KEYS\": () => (/* binding */ CONTROL_KEYS),\n/* harmony export */   \"getKeyboardLayout\": () => (/* binding */ getKeyboardLayout)\n/* harmony export */ });\nconst CONTROL_KEYS = new Set([\n  'CapsLock',\n  'ShiftLeft',\n  'ShiftRight',\n  'ControlLeft',\n  'AltLeft',\n  'OSLeft',\n  'OSRight',\n  'MetaLeft',\n  'MetaRight',\n  'AltRight',\n  'ArrowUp',\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n]);\n\nconst getKeyboardLayout = (lang = 'en') => [\n  [\n    {\n      code: 'IntlBackslash',\n      main: {\n        en: '§',\n        ru: '>',\n      },\n      shift: { en: '±', ru: '<' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Digit1',\n      main: { en: '1', ru: '1' },\n      shift: { en: '!', ru: '!' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Digit2',\n      main: { en: '2', ru: '2' },\n      shift: { en: '@', ru: '\"' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Digit3',\n      main: { en: '3', ru: '3' },\n      shift: { en: '#', ru: '№' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Digit4',\n      main: { en: '4', ru: '4' },\n      shift: { en: '$', ru: '%' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Digit5',\n      main: { en: '5', ru: '5' },\n      shift: { en: '%', ru: ':' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Digit6',\n      main: { en: '6', ru: '6' },\n      shift: { en: '^', ru: ',' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Digit7',\n      main: { en: '7', ru: '7' },\n      shift: { en: '&', ru: '.' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Digit8',\n      main: { en: '8', ru: '8' },\n      shift: { en: '*', ru: ';' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Digit9',\n      main: { en: '9', ru: '9' },\n      shift: { en: '(', ru: '(' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Digit0',\n      main: { en: '0', ru: '0' },\n      shift: { en: ')', ru: ')' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Minus',\n      main: { en: '-', ru: '-' },\n      shift: { en: '_', ru: '_' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Equal',\n      main: { en: '=', ru: '=' },\n      shift: { en: '+', ru: '+' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Backspace',\n      main: { en: 'Backspace', ru: 'Backspace' },\n      shift: { en: 'Backspace', ru: 'Backspace' },\n      isLetter: false,\n      className: 'two-place',\n    },\n  ],\n  [\n    {\n      code: 'Tab',\n      main: { en: 'Tab', ru: 'Tab' },\n      shift: { en: 'Tab', ru: 'Tab' },\n      isLetter: false,\n      className: 'shift-key',\n    },\n    {\n      code: 'KeyQ',\n      main: { en: 'q', ru: 'й' },\n      shift: { en: 'Q', ru: 'Й' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyW',\n      main: { en: 'w', ru: 'ц' },\n      shift: { en: 'W', ru: 'Ц' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyE',\n      main: { en: 'e', ru: 'у' },\n      shift: { en: 'E', ru: 'У' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyR',\n      main: { en: 'r', ru: 'к' },\n      shift: { en: 'R', ru: 'К' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyT',\n      main: { en: 't', ru: 'е' },\n      shift: { en: 'T', ru: 'Е' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyY',\n      main: { en: 'y', ru: 'н' },\n      shift: { en: 'Y', ru: 'Н' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyU',\n      main: { en: 'u', ru: 'г' },\n      shift: { en: 'U', ru: 'Г' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyI',\n      main: { en: 'i', ru: 'ш' },\n      shift: { en: 'I', ru: 'Ш' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyO',\n      main: { en: 'o', ru: 'щ' },\n      shift: { en: 'O', ru: 'Щ' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyP',\n      main: { en: 'p', ru: 'з' },\n      shift: { en: 'P', ru: 'З' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'BracketLeft',\n      main: { en: '[', ru: 'х' },\n      shift: { en: '{', ru: 'Х' },\n      isLetter: lang === 'ru',\n      className: '',\n    },\n    {\n      code: 'BracketRight',\n      main: { en: ']', ru: 'ъ' },\n      shift: { en: '}', ru: 'Ъ' },\n      isLetter: lang === 'ru',\n      className: '',\n    },\n    {\n      code: 'Backslash',\n      main: { en: '\\\\', ru: 'ё' },\n      shift: { en: '|', ru: 'Ё' },\n      isLetter: lang === 'ru',\n      className: '',\n    },\n    {\n      code: 'Delete',\n      main: { en: 'Del', ru: 'Del' },\n      shift: { en: 'Del', ru: 'Del' },\n      isLetter: false,\n      className: 'shift-key',\n    },\n  ],\n  [\n    {\n      code: 'CapsLock',\n      main: { en: 'CapsLock', ru: 'CapsLock' },\n      shift: { en: 'CapsLock', ru: 'CapsLock' },\n      isLetter: false,\n      className: 'two-place',\n    },\n    {\n      code: 'KeyA',\n      main: { en: 'a', ru: 'ф' },\n      shift: { en: 'A', ru: 'Ф' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyS',\n      main: { en: 's', ru: 'ы' },\n      shift: { en: 'S', ru: 'Ы' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyD',\n      main: { en: 'd', ru: 'в' },\n      shift: { en: 'D', ru: 'В' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyF',\n      main: { en: 'f', ru: 'а' },\n      shift: { en: 'F', ru: 'А' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyG',\n      main: { en: 'g', ru: 'п' },\n      shift: { en: 'G', ru: 'П' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyH',\n      main: { en: 'h', ru: 'р' },\n      shift: { en: 'H', ru: 'Р' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyJ',\n      main: { en: 'j', ru: 'о' },\n      shift: { en: 'J', ru: 'О' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyK',\n      main: { en: 'k', ru: 'л' },\n      shift: { en: 'K', ru: 'Л' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyL',\n      main: { en: 'l', ru: 'д' },\n      shift: { en: 'L', ru: 'Д' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'Semicolon',\n      main: { en: ';', ru: 'ж' },\n      shift: { en: ':', ru: 'Ж' },\n      isLetter: lang === 'ru',\n      className: '',\n    },\n    {\n      code: 'Quote',\n      main: { en: '\\'', ru: 'э' },\n      shift: { en: '\"', ru: 'Э' },\n      isLetter: lang === 'ru',\n      className: '',\n    },\n    {\n      code: 'Enter',\n      main: { en: 'Enter', ru: 'Enter' },\n      shift: { en: 'Enter', ru: 'Enter' },\n      isLetter: false,\n      className: 'two-place',\n    },\n  ],\n  [\n    {\n      code: 'ShiftLeft',\n      main: { en: 'Shift', ru: 'Shift' },\n      shift: { en: 'Shift', ru: 'Shift' },\n      isLetter: false,\n      className: 'shift-key',\n    },\n    {\n      code: 'Backquote',\n      main: { en: '`', ru: ']' },\n      shift: { en: '~', ru: '[' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'KeyZ',\n      main: { en: 'z', ru: 'я' },\n      shift: { en: 'Z', ru: 'Я' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyX',\n      main: { en: 'x', ru: 'ч' },\n      shift: { en: 'X', ru: 'Ч' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyC',\n      main: { en: 'c', ru: 'с' },\n      shift: { en: 'C', ru: 'С' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyV',\n      main: { en: 'v', ru: 'м' },\n      shift: { en: 'V', ru: 'М' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyB',\n      main: { en: 'b', ru: 'и' },\n      shift: { en: 'B', ru: 'И' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyN',\n      main: { en: 'n', ru: 'т' },\n      shift: { en: 'N', ru: 'Т' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'KeyM',\n      main: { en: 'm', ru: 'ь' },\n      shift: { en: 'M', ru: 'Ь' },\n      isLetter: true,\n      className: '',\n    },\n    {\n      code: 'Comma',\n      main: { en: ',', ru: 'б' },\n      shift: { en: '<', ru: 'Б' },\n      isLetter: lang === 'ru',\n      className: '',\n    },\n    {\n      code: 'Period',\n      main: { en: '.', ru: 'ю' },\n      shift: { en: '>', ru: 'Ю' },\n      isLetter: lang === 'ru',\n      className: '',\n    },\n    {\n      code: 'Slash',\n      main: { en: '/', ru: '/' },\n      shift: { en: '?', ru: '?' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'ArrowUp',\n      main: { en: '&uarr;', ru: '&uarr;' },\n      shift: { en: '&uarr;', ru: '&uarr;' },\n      isLetter: false,\n      className: 'arrow-key',\n    },\n    {\n      code: 'ShiftRight',\n      main: { en: 'Shift', ru: 'Shift' },\n      shift: { en: 'Shift', ru: 'Shift' },\n      isLetter: false,\n      className: 'shift-key',\n    },\n  ],\n  [\n    {\n      code: 'ControlLeft',\n      main: { en: 'Control', ru: 'Control' },\n      shift: { en: 'Control', ru: 'Control' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'AltLeft',\n      main: { en: 'Opt', ru: 'Opt' },\n      shift: { en: 'Opt', ru: 'Opt' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'MetaLeft',\n      main: { en: 'Cmd', ru: 'Cmd' },\n      shift: { en: 'Cmd', ru: 'Cmd' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'Space',\n      main: { en: 'Space', ru: 'Space' },\n      shift: { en: 'Space', ru: 'Space' },\n      isLetter: false,\n      className: 'five-place',\n    },\n    {\n      code: 'MetaRight',\n      main: { en: 'Cmd', ru: 'Cmd' },\n      shift: { en: 'Cmd', ru: 'Cmd' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'AltRight',\n      main: { en: 'Opt', ru: 'Opt' },\n      shift: { en: 'Opt', ru: 'Opt' },\n      isLetter: false,\n      className: '',\n    },\n    {\n      code: 'ArrowLeft',\n      main: { en: '&larr;', ru: '&larr;' },\n      shift: { en: '&larr;', ru: '&larr;' },\n      isLetter: false,\n      className: 'arrow-key',\n    },\n    {\n      code: 'ArrowDown',\n      main: { en: '&darr;', ru: '&darr;' },\n      shift: { en: '&darr;', ru: '&darr;' },\n      isLetter: false,\n      className: 'arrow-key',\n    },\n    {\n      code: 'ArrowRight',\n      main: { en: '&rarr;', ru: '&rarr;' },\n      shift: { en: '&rarr;', ru: '&rarr;' },\n      isLetter: false,\n      className: 'arrow-key',\n    },\n  ],\n];\n\n\n//# sourceURL=webpack://rs-virtual-keyboard/./src/scripts/keyboard-rows.js?")}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];if(void 0!==e)return e.exports;var t=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(n,e)=>{for(var t in e)__webpack_require__.o(e,t)&&!__webpack_require__.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},__webpack_require__.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/index.js")})();